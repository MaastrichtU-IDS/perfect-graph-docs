(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{115:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=u(n),b=r,f=s["".concat(c,".").concat(b)]||s[b]||d[b]||o;return n?a.a.createElement(f,i(i({ref:t},l),{},{components:n})):a.a.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=b;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(115)),c={title:"Introduction",sidebar_label:"Introduction",slug:"/"},i={unversionedId:"perfect-graph/introduction",id:"perfect-graph/introduction",isDocsHomePage:!1,title:"Introduction",description:"Motivation",source:"@site/docs/perfect-graph/introduction.md",slug:"/",permalink:"/perfect-graph-docs/docs/",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/perfect-graph/introduction.md",version:"current",sidebar_label:"Introduction",sidebar:"docs",next:{title:"Design Principles",permalink:"/perfect-graph-docs/docs/perfect-graph/design-principles"}},p=[{value:"Motivation",id:"motivation",children:[]},{value:"Usage",id:"usage",children:[]}],l={toc:p};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"motivation"},"Motivation"),Object(o.b)("p",null,"We want to build a collaborative Knowledge Graph Editor. To achive that goal we need a Graph Visualizer on a web browser and it needs to have a declarative rendering. Because in imperative style we need to call appropriate api functions respect to the data changes like addNode, deleteNode etc. But we just want to change JSON data (node and edge information) and render elements respectively to the changes."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"First, install ",Object(o.b)("a",{href:"https://nodejs.org/en/download/",target:"_blank"},"Nodejs")," and ",Object(o.b)("a",{href:"https://classic.yarnpkg.com/en/docs/install/",target:"_blank"},"Yarn")," to your working environment. Then"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"yarn global add expo-cli\n")),Object(o.b)("p",null,"Then,"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"expo init my-project\ncd my-project\nyarn add perfect-graph unitx-ui unitx\n")),Object(o.b)("p",null,"After you can write this command to the terminal in your project directory"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},"yarn web\n")),Object(o.b)("p",null,"So let's start coding"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'import { Graph } from "perfect-graph";\n\nfunction MyGraph() {\n  return (\n    <Graph\n      style={{ width: "100%", height: 250 }}\n      nodes={[\n        { id: 1, position: { x: 10, y: 10 } },\n        { id: 2, position: { x: 300, y: 100 } },\n      ]}\n      edges={[{ id: 51, source: 1, target: 2 }]}\n    />\n  );\n}\n')),Object(o.b)("p",null,"Furthermore please refer to the Components Section."))}u.isMDXComponent=!0}}]);